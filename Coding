# Coding

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import datetime
from time import strftime
%matplotlib inline
import matplotlib.ticker as mtick

base_data=pd.read_csv('Data.csv')

base_data.head(10)

base_data.info()

base_data.shape

base_data['ScheduledDay']=pd.to_datetime(base_data['ScheduledDay']).dt.date.astype('datetime64[ns]')
base_data['AppointmentDay']=pd.to_datetime(base_data['AppointmentDay']).dt.date.astype('datetime64[ns]')

base_data['sch_weekday']=base_data['ScheduledDay'].dt.dayofweek
base_data['app_weekday']=base_data['AppointmentDay'].dt.dayofweek

base_data['sch_weekday'].value_counts()
base_data['app_weekday'].value_counts()

base_data=base_data.rename(columns={'Hipertension':'Hypertension','Handcap':'Handicap','SMS_received':'SMSreceived','No-show':'Noshow'})

base_data.drop(['PatientId', 'AppointmentID','Neighbourhood'], axis=1, inplace=True)

# Visulaisation

base_data['Noshow'].value_counts().plot(kind='barh',figsize=(8,6))
plt.xlabel('count', labelpad=14)
plt.ylabel('Targate variabel', labelpad=14)
plt.title('count of target',y=1.02)

100*base_data['Noshow'].value_counts()/len(base_data['Noshow'])

missing=pd.DataFrame((base_data.isnull().sum())*100/base_data.shape[0]).reset_index()
plt.figure(figsize=(16,5))
ax=sns.pointplot(x='index',y=0, data=missing)
plt.xticks(rotation=90,fontsize=7)
plt.title('percentage of missing value')
plt.ylabel('PERCENTAGE')
plt.show()

labels=['{0} - {1}'.format(i,i+20) for i in range(1,118,20)]
base_data['Age_group']=pd.cut(base_data.Age, range(1,130,20),right=False,labels=labels)

for i, predictor in enumerate(base_data.drop(columns=['Noshow'])):
    print('-'*10,predictor,'-'*10)
    print(base_data[predictor].value_counts())
    plt.figure(i)
    sns.countplot(data=base_data,x=predictor,hue='Noshow')

base_data_dummies=pd.get_dummies(base_data)
base_data_dummies.head(10)

plt.figure(figsize=(20,8))
base_data_dummies.corr()['Noshow'].sort_values(ascending=False).plot(kind='bar')

plt.figure(figsize=(20,8))
correlation_values = base_data_dummies.corr()['Noshow'].sort_values(ascending=False)
correlation_values.plot(kind='bar')
plt.xlabel('Features')
plt.ylabel('Correlation with Noshow')
plt.title('Correlation between Features and Noshow')
plt.show()
